name: Capsule tests -- manual trigger

# This workflow runs the frontend tests against chosen branch

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Project'
        required: true
        type: choice
        options:
          - explorer-e2e
          - console-lite-e2e
          - stats-e2e
          - token-e2e
          - trading-e2e
      runAlltests:
        description: 'Run only smoke tests?'
        required: true
        type: boolean
        default: false

jobs:
  manual:
    name: Run capsule tests -- manual trigger
    runs-on: self-hosted
    env:
      GO111MODULE: 'on'
      VEGA_VERSION: 'v0.56.0'
    steps:
      #######
      ## Setup langs
      #######
      - name: Set up Go
        uses: actions/setup-go@v3
        id: go
        with:
          go-version: 1.19
      - name: Set up Node 16
        uses: actions/setup-node@v2
        id: npm
        with:
          node-version: 16

      #######
      ## Install Yarn
      #######
      - name: Setup yarn
        run: npm install -g yarn

      #######
      ## Checkout repos
      #######

      # Checkout front ends
      - name: Checkout frontend mono repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          path: './frontend-monorepo'

      # See if we capsule is needed for this project
      - name: See if capsule is necessary
        if: ${{  github.event.inputs.project == 'explorer-e2e' || github.event.inputs.project == 'token-e2e' }}
        run: echo RUN_CAPSULE=true >> $GITHUB_ENV

      # Checkout capsule to build local network
      - name: Checkout capsule
        if: ${{ env.RUN_CAPSULE }}
        uses: actions/checkout@v2
        with:
          repository: vegaprotocol/vegacapsule
          ref: main
          token: ${{ secrets.VEGA_CI_BOT_GITHUB_TOKEN }}
          path: './capsule'

      # Restore node_modules from cache if possible
      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: |
            frontend-monorepo/node_modules
            /home/runner/.cache/Cypress
          key: node_modules_cypress-${{ hashFiles('frontend-monorepo/yarn.lock') }}

      # Install frontend dependencies
      - name: Install root dependencies
        run: yarn install --frozen-lockfile
        working-directory: frontend-monorepo

      #######
      ## Build binaries
      #######
      - name: Build capsule
        if: ${{ env.RUN_CAPSULE }}
        run: go install
        working-directory: capsule

      - name: Set GOBIN
        run: echo GOBIN=$(go env GOPATH)/bin >> $GITHUB_ENV

      - name: Install Vega binaries
        if: ${{ env.RUN_CAPSULE }}
        run: |
          wget 'https://github.com/vegaprotocol/vega/releases/download/${{ env.VEGA_VERSION }}/vega-linux-amd64.zip'
          unzip vega-linux-amd64.zip -d ${{ env.GOBIN }}

      - name: Install date-node binaries
        if: ${{ env.RUN_CAPSULE }}
        run: |
          wget 'https://github.com/vegaprotocol/vega/releases/download/${{ env.VEGA_VERSION }}/data-node-linux-amd64.zip'
          unzip data-node-linux-amd64.zip -d ${{ env.GOBIN }}

      - name: Install Vega wallet binaries
        run: |
          wget 'https://github.com/vegaprotocol/vega/releases/download/${{ env.VEGA_VERSION }}/vegawallet-linux-amd64.zip'
          unzip vegawallet-linux-amd64.zip -d ${{ env.GOBIN }}

      ######
      ## Start capsule
      ######
      - name: Login to docker
        if: ${{ env.RUN_CAPSULE }}
        run: echo -n ${{ secrets.VEGA_CI_BOT_GITHUB_TOKEN }} | docker login https://ghcr.io -u vega-ci-bot --password-stdin

      - name: Start nomad
        if: ${{ env.RUN_CAPSULE }}
        run: vegacapsule nomad &

      - name: Bootstrap network
        if: ${{ env.RUN_CAPSULE }}
        run: vegacapsule network bootstrap --config-path=../frontend-monorepo/vegacapsule/config.hcl --force
        working-directory: capsule

      ######
      ## Setup a Vega wallet for our user
      ######
      - name: Create passphrase
        run: echo "${{ secrets.CYPRESS_TRADING_TEST_VEGA_WALLET_PASSPHRASE }}" > ./passphrase
      - name: Create recovery
        run: echo "${{ secrets.TRADING_TEST_VEGA_WALLET_RECOVERY }}" > ./recovery

      - name: Initialize wallet
        run: vegawallet init -f --home ~/.vegacapsule/testnet/wallet
      - name: Import wallet
        run: vegawallet import -w UI_Trading_Test --recovery-phrase-file ./recovery -p ./passphrase --home ~/.vegacapsule/testnet/wallet
      - name: Create public key 2
        run: vegawallet key generate -w UI_Trading_Test -p ./passphrase --home ~/.vegacapsule/testnet/wallet

      - name: Import fairground network
        if: ${{ env.RUN_CAPSULE==false }}
        run: vegawallet network import --from-url="https://raw.githubusercontent.com/vegaprotocol/networks/master/fairground/fairground.toml" --force --home ~/.vegacapsule/testnet/wallet

      - name: Start service using fairground network
        if: ${{ env.RUN_CAPSULE==false }}
        run: vegawallet service run --network fairground --automatic-consent --home ~/.vegacapsule/testnet/wallet &

      - name: Start service using capsule network
        if: ${{ env.RUN_CAPSULE }}
        run: vegawallet service run --network DV --automatic-consent  --home ~/.vegacapsule/testnet/wallet &

      ######
      ## Run some tests
      ######

      # To make sure that all Cypress binaries are installed properly
      - name: Install cypress bins
        run: yarn cypress install
        working-directory: frontend-monorepo

      - name: Run smoke Cypress tests
        if: ${{ github.event.inputs.runAlltests == 'true' }}
        run: yarn nx run ${{ github.event.inputs.project }}:e2e --record --key ${{ secrets.CYPRESS_RECORD_KEY }} --env.grepTags='@smoke' --browser chrome --headless
        working-directory: frontend-monorepo
        env:
          CYPRESS_TRADING_TEST_VEGA_WALLET_PASSPHRASE: ${{ secrets.CYPRESS_TRADING_TEST_VEGA_WALLET_PASSPHRASE }}
          CYPRESS_SLACK_WEBHOOK: ${{ secrets.CYPRESS_SLACK_WEBHOOK }}
          CYPRESS_ETH_WALLET_MNEMONIC: ${{ secrets.CYPESS_ETH_WALLET_MNEMONIC }}
          CYPRESS_TEARDOWN_NETWORK_AFTER_FLOWS: true

      - name: Run Cypress tests
        if: ${{ github.event.inputs.runAlltests == 'false' }}
        run: yarn nx run ${{ github.event.inputs.project }}:e2e --record --key ${{ secrets.CYPRESS_RECORD_KEY }}
        working-directory: frontend-monorepo
        env:
          CYPRESS_TRADING_TEST_VEGA_WALLET_PASSPHRASE: ${{ secrets.CYPRESS_TRADING_TEST_VEGA_WALLET_PASSPHRASE }}
          CYPRESS_SLACK_WEBHOOK: ${{ secrets.CYPRESS_SLACK_WEBHOOK }}
          CYPRESS_ETH_WALLET_MNEMONIC: ${{ secrets.CYPESS_ETH_WALLET_MNEMONIC }}
          CYPRESS_TEARDOWN_NETWORK_AFTER_FLOWS: true

      ######
      ## Upload logs
      ######

      - name: Logs
        if: ${{ env.RUN_CAPSULE }}
        run: vegacapsule network logs > vega-capsule-logs.txt

      - uses: actions/upload-artifact@v2
        if: ${{ env.RUN_CAPSULE }}
        with:
          name: logs
          path: ./vega-capsule-logs.txt
