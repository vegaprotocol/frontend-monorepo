name: CI/CD

on:
  push:
    branches:
      - release/*
      - develop
  pull_request:
    types:
      - opened
      - ready_for_review
      - reopened
      - edited
      - synchronize
jobs:
  node-modules:
    runs-on: ubuntu-22.04
    name: 'Cache yarn modules'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Cache node modules
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('yarn.lock') }}
          # comment out "restore-keys" if you need to rebuild yarn from 0
          restore-keys: |
            ${{ runner.os }}-cache-node-modules-

      - name: Setup node
        uses: actions/setup-node@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          node-version-file: '.nvmrc'
          # https://stackoverflow.com/questions/61010294/how-to-cache-yarn-packages-in-github-actions
          cache: yarn

      - name: yarn install
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --pure-lockfile

  lint-pr-title:
    needs: node-modules
    if: ${{ github.event_name == 'pull_request' }}
    name: Verify PR title
    uses: ./.github/workflows/lint-pr.yml
    secrets: inherit

  lint-test-build:
    timeout-minutes: 60
    needs: node-modules
    runs-on: ubuntu-22.04
    name: '(CI) lint + unit test + build'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          # https://stackoverflow.com/questions/61010294/how-to-cache-yarn-packages-in-github-actions
          cache: yarn

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3
        with:
          main-branch-name: develop

      - name: Check formatting
        run: yarn nx format:check

      - name: Lint affected
        run: yarn nx affected:lint --max-warnings=0

      - name: Build affected spec
        run: yarn nx affected --target=build-spec

      - name: Test affected
        run: yarn nx affected:test

      - name: Build affected
        run: yarn nx affected:build || (yarn install && yarn nx affected:build)

      # See affected apps
      - name: See affected apps
        run: |
          affected="$(yarn nx print-affected --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} --select=projects)"
          branch_slug="$(echo '${{ github.head_ref || github.ref_name }}' | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | cut -c 1-50 )"

          echo ">>>> debug"
          echo "NX_BASE: ${{ env.NX_BASE }}"
          echo "NX_HEAD: ${{ env.NX_HEAD }}"
          echo "Affected: ${affected}"
          echo "Branch slug: ${branch_slug}"
          echo ">>>> eof debug"

          projects_array=()

          preview_governance="not deployed"
          preview_trading="not deployed"
          preview_explorer="not deployed"
          preview_tools="not deployed"

          # parse if affected is any of three main applications, if none - use all of them
          if echo "$affected" | grep -q governance; then
            echo "Governance is affected"
            projects_array+=("governance")
            preview_governance=$(printf "https://%s.%s.vega.rocks" "governance" "$branch_slug")
          fi
          if echo "$affected" | grep -q trading; then
            echo "Trading is affected"
            projects_array+=("trading")
            preview_trading=$(printf "https://%s.%s.vega.rocks" "trading" "$branch_slug")
          fi
          if echo "$affected" | grep -q explorer; then
            echo "Explorer is affected"
            projects_array+=("explorer")
            preview_explorer=$(printf "https://%s.%s.vega.rocks" "explorer" "$branch_slug")
          fi
          if [[ ${#projects_array[@]} -eq 0 ]]; then
            projects_array=("governance" "trading" "explorer")
            preview_governance=$(printf "https://%s.%s.vega.rocks" "governance" "$branch_slug")
            preview_trading=$(printf "https://%s.%s.vega.rocks" "trading" "$branch_slug")
            preview_explorer=$(printf "https://%s.%s.vega.rocks" "explorer" "$branch_slug")
          fi

          # applications parsed before this loop are applicable for running e2e-tests
          projects_e2e_array=()
          for project in "${projects_array[@]}"; do
            projects_e2e_array+=("${project}-e2e")
          done
          # all applications below this loop are not applicable for running e2e-test

          # check if pull request event to deploy tools
          if [[ "${{ github.event_name }}" = "pull_request" ]]; then
            if echo "$affected" | grep -q multisig-signer; then
              echo "Tools are affected"
              echo "Deploying tools on preview"
              preview_tools=$(printf "https://%s.%s.vega.rocks" "tools" "$branch_slug")

              projects_array+=("multisig-signer")
            fi
          # those apps deploy only from develop to mainnet
          elif [[ "${{ github.ref }}" =~ .*develop$ ]]; then
            if echo "$affected" | grep -q multisig-signer; then
              echo "Tools are affected"
              echo "Deploying tools on s3"

              projects_array+=("multisig-signer")
            fi
            if echo "$affected" | grep -q static; then
              echo "static is affected"
              echo "Deploying static on s3"

              projects_array+=("static")
            fi
            if echo "$affected" | grep -q ui-toolkit; then
              echo "ui-toolkit is affected"
              echo "Deploying ui-toolkit on s3"

              projects_array+=("ui-toolkit")
            fi
          fi

          # if branch starts with release/ and ends with trading / governance or explorer - overwrite the array of affected projects with fixed single application
          if [[ "${{ github.ref }}" == release* ]]; then
            case "${{ github.ref }}" in
              *trading)
                projects_array=(trading)
                projects_e2e_array=(trading)
              ;;
              *governance)
                projects_array=(governance)
                projects_e2e_array=(governance)
              ;;
              *explorer)
                projects_array=(explorer)
                projects_e2e_array=(explorer)
              ;;
            esac
          fi

          echo "Projects: ${projects_array[@]}"
          echo "Projects E2E: ${projects_e2e_array[@]}"
          projects_json=$(jq -M --compact-output --null-input '$ARGS.positional' --args -- "${projects_array[@]}")
          projects_e2e_json=$(jq -M --compact-output --null-input '$ARGS.positional' --args -- "${projects_e2e_array[@]}")

          echo PROJECTS_E2E=$projects_e2e_json >> $GITHUB_ENV
          echo PROJECTS=$projects_json >> $GITHUB_ENV

          echo PREVIEW_GOVERNANCE=$preview_governance >> $GITHUB_ENV
          echo PREVIEW_TRADING=$preview_trading >> $GITHUB_ENV
          echo PREVIEW_EXPLORER=$preview_explorer >> $GITHUB_ENV
          echo PREVIEW_TOOLS=$preview_tools >> $GITHUB_ENV

    outputs:
      projects: ${{ env.PROJECTS }}
      projects-e2e: ${{ env.PROJECTS_E2E }}
      preview_governance: ${{ env.PREVIEW_GOVERNANCE }}
      preview_trading: ${{ env.PREVIEW_TRADING }}
      preview_explorer: ${{ env.PREVIEW_EXPLORER }}
      preview_tools: ${{ env.PREVIEW_TOOLS }}

  cypress:
    needs: lint-test-build
    name: '(CI) cypress'
    # if: ${{ needs.lint-test-build.outputs.projects-e2e != '[]' }}
    uses: ./.github/workflows/cypress-run.yml
    secrets: inherit
    with:
      projects: ${{ needs.lint-test-build.outputs.projects-e2e }}
      tags: '@smoke @regression'

  publish-dist:
    needs: lint-test-build
    name: '(CD) publish dist'
    if: ${{ (github.event_name == 'pull_request' &&  github.event.pull_request.head.repo.full_name == 'vegaprotocol/frontend-monorepo') || github.event_name == 'push' }}
    uses: ./.github/workflows/publish-dist.yml
    secrets: inherit
    with:
      projects: ${{ needs.lint-test-build.outputs.projects }}

  dist-check:
    runs-on: ubuntu-latest
    needs:
      - publish-dist
      - lint-test-build
    if: ${{ github.event_name == 'pull_request' &&  github.event.pull_request.head.repo.full_name == 'vegaprotocol/frontend-monorepo' }}
    timeout-minutes: 60
    name: '(CD) comment preview links'
    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: Previews

      - name: Wait for deployments
        run: |
          # https://stackoverflow.com/questions/3183444/check-for-valid-link-url
          regex='(https?|ftp|file)://[-[:alnum:]\+&@#/%?=~_|!:,.;]*[-[:alnum:]\+&@#/%=~_|]'
          if [[ "${{ needs.lint-test-build.outputs.preview_governance }}" =~ $regex ]]; then
            until curl --insecure --location --fail "${{ needs.lint-test-build.outputs.preview_governance }}"; do
              echo "waiting for governance preview: ${{ needs.lint-test-build.outputs.preview_governance }}"
              sleep 5
            done
          fi
          if [[ "${{ needs.lint-test-build.outputs.preview_explorer }}" =~ $regex ]]; then
            until curl --insecure --location --fail "${{ needs.lint-test-build.outputs.preview_explorer }}"; do
              echo "waiting for explorer preview: ${{ needs.lint-test-build.outputs.preview_explorer }}"
              sleep 5
            done
          fi
          if [[ "${{ needs.lint-test-build.outputs.preview_trading }}" =~ $regex ]]; then
            until curl --insecure --location --fail "${{ needs.lint-test-build.outputs.preview_trading }}"; do
              echo "waiting for trading preview: ${{ needs.lint-test-build.outputs.preview_trading }}"
              sleep 5
            done
          fi
          if [[ "${{ needs.lint-test-build.outputs.preview_tools }}" =~ $regex ]]; then
            until curl --insecure --location --fail "${{ needs.lint-test-build.outputs.preview_tools }}"; do
              echo "waiting for tools preview: ${{ needs.lint-test-build.outputs.preview_tools }}"
              sleep 5
            done
          fi

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v3
        if: ${{ steps.fc.outputs.comment-id == 0 }}
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Previews
            * governance: ${{ needs.lint-test-build.outputs.preview_governance }}
            * explorer: ${{ needs.lint-test-build.outputs.preview_explorer  }}
            * trading: ${{ needs.lint-test-build.outputs.preview_trading }}
            * tools: ${{ needs.lint-test-build.outputs.preview_tools }}

  # Report single result at the end, to avoid mess with required checks in PR
  cypress-check:
    name: '(CI) cypress - check'
    if: ${{ always() }}
    needs: cypress
    runs-on: ubuntu-22.04
    steps:
      - run: |
          result="${{ needs.cypress.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi
