fragment ExplorerOraclePerpetual on Perpetual {
  dataSourceSpecForSettlementData {
    id
    status
  }
  dataSourceSpecForSettlementSchedule {
    id
    status
  }
}

fragment ExplorerOracleFuture on Future {
  dataSourceSpecForSettlementData {
    id
    status
  }
  dataSourceSpecForTradingTermination {
    id
    status
  }
}

fragment ExplorerOracleForMarketsMarket on Market {
  id
  state
  tradableInstrument {
    instrument {
      product {
        ... on Future {
          ...ExplorerOracleFuture
        }
        ... on Perpetual {
          ...ExplorerOraclePerpetual
        }
      }
    }
  }
}

fragment ExplorerOracleDataSourceSpec on ExternalDataSourceSpec {
  spec {
    id
    status
    data {
      sourceType {
        ... on DataSourceDefinitionInternal {
          sourceType {
            ... on DataSourceSpecConfigurationTime {
              conditions {
                value
                operator
              }
            }
            ... on DataSourceSpecConfigurationTimeTrigger {
              conditions {
                value
                operator
              }
              triggers {
                initial
                every
              }
            }
          }
        }
        ... on DataSourceDefinitionExternal {
          sourceType {
            ... on EthCallSpec {
              address
              sourceChainId
            }
            ... on DataSourceSpecConfiguration {
              signers {
                signer {
                  ... on ETHAddress {
                    address
                  }
                  ... on PubKey {
                    key
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

query ExplorerOracleFormMarkets {
  marketsConnection(includeSettled: false, pagination: { first: 20 }) {
    edges {
      node {
        ...ExplorerOracleForMarketsMarket
      }
    }
  }
  oracleSpecsConnection {
    edges {
      node {
        dataSourceSpec {
          ...ExplorerOracleDataSourceSpec
        }
        dataConnection(pagination: { first: 1 }) {
          edges {
            node {
              externalData {
                data {
                  data {
                    name
                    value
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

query ExplorerOracleForMarket($id: ID!) {
  marketsConnection(id: $id) {
    edges {
      node {
        ...ExplorerOracleForMarketsMarket
      }
    }
  }
  oracleSpecsConnection {
    edges {
      node {
        dataSourceSpec {
          ...ExplorerOracleDataSourceSpec
        }
        dataConnection(pagination: { first: 1 }) {
          edges {
            node {
              externalData {
                data {
                  data {
                    name
                    value
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
