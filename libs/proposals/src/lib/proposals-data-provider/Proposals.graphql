fragment UpdateMarketStateFields on UpdateMarketState {
  market {
    id
    tradableInstrument {
      instrument {
        name
        code
      }
    }
  }
  updateType
  price
}

fragment NewMarketFields on NewMarket {
  instrument {
    name
    code
    product {
      ... on FutureProduct {
        settlementAsset {
          id
          name
          symbol
          decimals
          quantum
        }
        cap {
          maxPrice
          binarySettlement
          fullyCollateralised
        }
        quoteName
        dataSourceSpecForSettlementData {
          sourceType {
            ... on DataSourceDefinitionExternal {
              sourceType {
                ... on DataSourceSpecConfiguration {
                  signers {
                    signer {
                      ... on PubKey {
                        key
                      }
                      ... on ETHAddress {
                        address
                      }
                    }
                  }
                  filters {
                    key {
                      name
                      type
                    }
                    conditions {
                      operator
                      value
                    }
                  }
                }
              }
            }
          }
        }
        dataSourceSpecForTradingTermination {
          sourceType {
            ... on DataSourceDefinitionExternal {
              sourceType {
                ... on DataSourceSpecConfiguration {
                  signers {
                    signer {
                      ... on PubKey {
                        key
                      }
                      ... on ETHAddress {
                        address
                      }
                    }
                  }
                  filters {
                    key {
                      name
                      type
                    }
                    conditions {
                      operator
                      value
                    }
                  }
                }
              }
            }
          }
        }
        dataSourceSpecBinding {
          settlementDataProperty
          tradingTerminationProperty
        }
      }
      ... on PerpetualProduct {
        settlementAsset {
          id
          name
          symbol
          decimals
          quantum
        }
        quoteName
      }
    }
  }
  decimalPlaces
  riskParameters {
    ... on LogNormalRiskModel {
      riskAversionParameter
      tau
      params {
        mu
        r
        sigma
      }
    }
    ... on SimpleRiskModel {
      params {
        factorLong
        factorShort
      }
    }
  }
  metadata
  # priceMonitoringParameters {
  #   triggers {
  #     horizonSecs
  #     probability
  #     auctionExtensionSecs
  #   }
  # }
  # liquidityMonitoringParameters {
  #   targetStakeParameters {
  #     timeWindow
  #     scalingFactor
  #   }
  #   auctionExtensionSecs
  # }
  # linearSlippageFactor
  successorConfiguration {
    parentMarketId
  }
}

fragment UpdateMarketFields on UpdateMarket {
  marketId
  updateMarketConfiguration {
    instrument {
      code
      product {
        ... on UpdateFutureProduct {
          quoteName
          dataSourceSpecForSettlementData {
            sourceType {
              ... on DataSourceDefinitionExternal {
                sourceType {
                  ... on DataSourceSpecConfiguration {
                    signers {
                      signer {
                        ... on PubKey {
                          key
                        }
                        ... on ETHAddress {
                          address
                        }
                      }
                    }
                    filters {
                      key {
                        name
                        type
                      }
                      conditions {
                        operator
                        value
                      }
                    }
                  }
                }
              }
            }
          }
          dataSourceSpecForTradingTermination {
            sourceType {
              ... on DataSourceDefinitionExternal {
                sourceType {
                  ... on DataSourceSpecConfiguration {
                    signers {
                      signer {
                        ... on PubKey {
                          key
                        }
                        ... on ETHAddress {
                          address
                        }
                      }
                    }
                    filters {
                      key {
                        name
                        type
                      }
                      conditions {
                        operator
                        value
                      }
                    }
                  }
                }
              }
            }
          }
          dataSourceSpecBinding {
            settlementDataProperty
            tradingTerminationProperty
          }
        }
        ... on UpdatePerpetualProduct {
          quoteName
          dataSourceSpecForSettlementData {
            sourceType {
              ... on DataSourceDefinitionExternal {
                sourceType {
                  ... on DataSourceSpecConfiguration {
                    signers {
                      signer {
                        ... on PubKey {
                          key
                        }
                        ... on ETHAddress {
                          address
                        }
                      }
                    }
                    filters {
                      key {
                        name
                        type
                      }
                      conditions {
                        operator
                        value
                      }
                    }
                  }
                }
              }
            }
          }
          dataSourceSpecForSettlementSchedule {
            sourceType {
              ... on DataSourceDefinitionExternal {
                sourceType {
                  ... on DataSourceSpecConfiguration {
                    signers {
                      signer {
                        ... on PubKey {
                          key
                        }
                        ... on ETHAddress {
                          address
                        }
                      }
                    }
                    filters {
                      key {
                        name
                        type
                      }
                      conditions {
                        operator
                        value
                      }
                    }
                  }
                }
              }
            }
          }
          dataSourceSpecBinding {
            settlementDataProperty
            settlementScheduleProperty
          }
        }
      }
    }
    metadata
    priceMonitoringParameters {
      triggers {
        horizonSecs
        probability
        auctionExtensionSecs
      }
    }
    liquidityMonitoringParameters {
      targetStakeParameters {
        timeWindow
        scalingFactor
      }
      # auctionExtensionSecs
    }
    riskParameters {
      __typename
      ... on UpdateMarketSimpleRiskModel {
        simple {
          factorLong
          factorShort
        }
      }
      ... on UpdateMarketLogNormalRiskModel {
        logNormal {
          riskAversionParameter
          tau
          params {
            mu
            r
            sigma
          }
        }
      }
    }
  }
}

fragment NewAssetFields on NewAsset {
  name
  symbol
  decimals
  quantum
  source {
    ... on BuiltinAsset {
      maxFaucetAmountMint
    }
    ... on ERC20 {
      contractAddress
      lifetimeLimit
      withdrawThreshold
    }
  }
}

fragment UpdateAssetFields on UpdateAsset {
  assetId
  quantum
  source {
    ... on UpdateERC20 {
      lifetimeLimit
      withdrawThreshold
    }
  }
}

fragment UpdateNetworkParameterFields on UpdateNetworkParameter {
  networkParameter {
    key
    value
  }
}

fragment DispatchStrategyFields on DispatchStrategy {
  dispatchMetric
  dispatchMetricAssetId
  distributionStrategy
  marketIdsInScope
  entityScope
  individualScope
  teamScope
  nTopPerformers
  stakingRequirement
  notionalTimeWeightedAveragePositionRequirement
  windowLength
  lockPeriod
  rankTable {
    startRank
    shareRatio
  }
  capRewardFeeMultiple
  transferInterval
}

fragment NewTransferFields on NewTransfer {
  source
  sourceType
  destination
  destinationType
  asset {
    id
    symbol
    decimals
    quantum
  }
  fraction_of_balance
  amount
  transferType
  kind {
    __typename
    ... on OneOffGovernanceTransfer {
      deliverOn
    }
    ... on RecurringGovernanceTransfer {
      startEpoch
      endEpoch
      dispatchStrategy {
        ...DispatchStrategyFields
      }
    }
  }
}

fragment CancelTransferFields on CancelTransfer {
  transferId
}

fragment ProposalListFields on Proposal {
  id
  rationale {
    title
    description
  }
  reference
  state
  datetime
  rejectionReason
  party {
    id
  }
  votes {
    yes {
      totalTokens
      totalNumber
      totalWeight
    }
    no {
      totalTokens
      totalNumber
      totalWeight
    }
  }
  errorDetails
  rejectionReason
  requiredMajority
  requiredParticipation
  requiredLpMajority
  requiredLpParticipation
  terms {
    closingDatetime
    enactmentDatetime
    change {
      __typename
      ... on NewMarket {
        ...NewMarketFields
      }
      ... on UpdateMarket {
        ...UpdateMarketFields
      }
      ... on NewAsset {
        ...NewAssetFields
      }
      ... on UpdateAsset {
        ...UpdateAssetFields
      }
      ... on UpdateNetworkParameter {
        ...UpdateNetworkParameterFields
      }
      ... on UpdateMarketState {
        ...UpdateMarketStateFields
      }
    }
  }
}

query ProposalsList($proposalType: ProposalType, $inState: ProposalState) {
  proposalsConnection(proposalType: $proposalType, inState: $inState) {
    edges {
      node {
        ...ProposalListFields
      }
    }
  }
}

fragment NewMarketSuccessorFields on NewMarket {
  instrument {
    name
  }
  successorConfiguration {
    parentMarketId
  }
}

fragment MarketViewProposalFields on Proposal {
  id
  state
  terms {
    closingDatetime
    enactmentDatetime
    change {
      __typename
      ... on UpdateMarketState {
        ...UpdateMarketStateFields
      }
      ... on NewMarket {
        ...NewMarketSuccessorFields
      }
      ... on UpdateMarket {
        ...UpdateMarketFields
      }
    }
  }
}

fragment SubProposal on ProposalDetail {
  id
  batchId
  reference
  state
  terms {
    closingDatetime
    enactmentDatetime
    change {
      __typename
      ... on UpdateMarketState {
        ...UpdateMarketStateFields
      }
      ... on NewMarket {
        ...NewMarketSuccessorFields
      }
      ... on UpdateMarket {
        ...UpdateMarketFields
      }
    }
  }
}

query MarketViewProposals(
  $proposalType: ProposalType
  $inState: ProposalState
) {
  proposalsConnection(proposalType: $proposalType, inState: $inState) {
    edges {
      proposalNode {
        ... on BatchProposal {
          id
          subProposals {
            ...SubProposal
          }
        }
        ... on Proposal {
          ...MarketViewProposalFields
        }
      }
    }
  }
}

subscription MarketViewLiveProposals {
  proposals {
    ... on Proposal {
      ...MarketViewProposalFields
    }
  }
}
