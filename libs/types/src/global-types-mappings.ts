export enum AccountTypeMapping {
  ACCOUNT_TYPE_BOND = 'BOND',
  ACCOUNT_TYPE_EXTERNAL = 'EXTERNAL',
  ACCOUNT_TYPE_FEES_INFRASTRUCTURE = 'FEES_INFRASTRUCTURE',
  ACCOUNT_TYPE_FEES_LIQUIDITY = 'FEES_LIQUIDITY',
  ACCOUNT_TYPE_FEES_MAKER = 'FEES_MAKER',
  ACCOUNT_TYPE_GENERAL = 'GENERAL',
  ACCOUNT_TYPE_GLOBAL_INSURANCE = 'GLOBAL_INSURANCE',
  ACCOUNT_TYPE_GLOBAL_REWARD = 'GLOBAL_REWARD',
  ACCOUNT_TYPE_INSURANCE = 'INSURANCE',
  ACCOUNT_TYPE_MARGIN = 'MARGIN',
  ACCOUNT_TYPE_PENDING_TRANSFERS = 'PENDING_TRANSFERS',
  ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES = 'REWARD_LP_RECEIVED_FEES',
  ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES = 'REWARD_MAKER_RECEIVED_FEES',
  ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS = 'REWARD_MARKET_PROPOSERS',
  ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES = 'REWARD_TAKER_PAID_FEES',
  ACCOUNT_TYPE_SETTLEMENT = 'SETTLEMENT',
}

export enum AuctionTriggerMapping {
  AUCTION_TRIGGER_BATCH = 'BATCH',
  AUCTION_TRIGGER_LIQUIDITY = 'LIQUIDITY',
  AUCTION_TRIGGER_OPENING = 'OPENING',
  AUCTION_TRIGGER_PRICE = 'PRICE',
  AUCTION_TRIGGER_UNSPECIFIED = 'UNSPECIFIED',
}

/**
 * Comparator describes the type of comparison.
 */
export enum ConditionOperatorMapping {
  OPERATOR_EQUALS = 'EQUALS',
  OPERATOR_GREATER_THAN = 'GREATER_THAN',
  OPERATOR_GREATER_THAN_OR_EQUAL = 'GREATER_THAN_OR_EQUAL',
  OPERATOR_LESS_THAN = 'LESS_THAN',
  OPERATOR_LESS_THAN_OR_EQUAL = 'LESS_THAN_OR_EQUAL',
}

/**
 * The status of a deposit
 */
export enum DepositStatusMapping {
  STATUS_CANCELLED = 'CANCELLED',
  STATUS_FINALIZED = 'FINALIZED',
  STATUS_OPEN = 'OPEN',
}

/**
 * The interval for trade candles when subscribing via Vega GraphQL, default is I15M
 */
export enum IntervalMapping {
  INTERVAL_I15M = 'I15M',
  INTERVAL_I1D = 'I1D',
  INTERVAL_I1H = 'I1H',
  INTERVAL_I1M = 'I1M',
  INTERVAL_I5M = 'I5M',
  INTERVAL_I6H = 'I6H',
}

/**
 * The current state of a market
 */
export enum MarketStateMapping {
  STATE_ACTIVE = 'ACTIVE',
  STATE_CANCELLED = 'CANCELLED',
  STATE_CLOSED = 'CLOSED',
  STATE_PENDING = 'PENDING',
  STATE_PROPOSED = 'PROPOSED',
  STATE_REJECTED = 'REJECTED',
  STATE_SETTLED = 'SETTLED',
  STATE_SUSPENDED = 'SUSPENDED',
  STATE_TRADING_TERMINATED = 'TRADING_TERMINATED',
}

/**
 * What market trading mode is the market in
 */
export enum MarketTradingModeMapping {
  TRADING_MODE_BATCH_AUCTION = 'Batch auction',
  TRADING_MODE_CONTINUOUS = 'Continuous trading',
  TRADING_MODE_MONITORING_AUCTION = 'Monitoring auction',
  TRADING_MODE_NO_TRADING = 'No trading',
  TRADING_MODE_OPENING_AUCTION = 'Opening auction',
}

export enum NodeStatusMapping {
  NODE_STATUS_NON_VALIDATOR = 'Non validator',
  NODE_STATUS_VALIDATOR = 'Validator',
}

/**
 * Status describe the status of the oracle spec
 */
export enum OracleSpecStatusMapping {
  STATUS_ACTIVE = 'Active',
  STATUS_DEACTIVATED = 'Deactivated',
}

/**
 * Reason for the order being rejected by the core node
 */
export enum OrderRejectionReasonMapping {
  ORDER_ERROR_AMEND_FAILURE = 'AMEND_FAILURE',
  ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE = 'BUY_CANNOT_REFERENCE_BEST_ASK_PRICE',
  ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN = 'CANNOT_AMEND_FROM_GFA_OR_GFN',
  ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER = 'CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER',
  ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC = 'CANNOT_AMEND_TO_FOK_OR_IOC',
  ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN = 'CANNOT_AMEND_TO_GFA_OR_GFN',
  ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT = 'CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT',
  ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT = 'CANNOT_HAVE_GTC_AND_EXPIRYAT',
  ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION = 'CANNOT_SEND_FOK_ORDER_DURING_AUCTION',
  ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION = 'CANNOT_SEND_IOC_ORDER_DURING_AUCTION',
  ORDER_ERROR_EDIT_NOT_ALLOWED = 'EDIT_NOT_ALLOWED',
  ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT = 'EXPIRYAT_BEFORE_CREATEDAT',
  ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING = 'GFA_ORDER_DURING_CONTINUOUS_TRADING',
  ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION = 'GFN_ORDER_DURING_AN_AUCTION',
  ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE = 'INSUFFICIENT_ASSET_BALANCE',
  ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES = 'INSUFFICIENT_FUNDS_TO_PAY_FEES',
  ORDER_ERROR_INTERNAL_ERROR = 'INTERNAL_ERROR',
  ORDER_ERROR_INVALID_EXPIRATION_DATETIME = 'INVALID_EXPIRATION_DATETIME',
  ORDER_ERROR_INVALID_MARKET_ID = 'INVALID_MARKET_ID',
  ORDER_ERROR_INVALID_ORDER_ID = 'INVALID_ORDER_ID',
  ORDER_ERROR_INVALID_ORDER_REFERENCE = 'INVALID_ORDER_REFERENCE',
  ORDER_ERROR_INVALID_PARTY_ID = 'INVALID_PARTY_ID',
  ORDER_ERROR_INVALID_PERSISTENCE = 'INVALID_PERSISTENCE',
  ORDER_ERROR_INVALID_REMAINING_SIZE = 'INVALID_REMAINING_SIZE',
  ORDER_ERROR_INVALID_SIZE = 'INVALID_SIZE',
  ORDER_ERROR_INVALID_TIME_IN_FORCE = 'INVALID_TIME_IN_FORCE',
  ORDER_ERROR_INVALID_TYPE = 'INVALID_TYPE',
  ORDER_ERROR_MARGIN_CHECK_FAILED = 'MARGIN_CHECK_FAILED',
  ORDER_ERROR_MARKET_CLOSED = 'MARKET_CLOSED',
  ORDER_ERROR_MISSING_GENERAL_ACCOUNT = 'MISSING_GENERAL_ACCOUNT',
  ORDER_ERROR_MUST_BE_GTT_OR_GTC = 'MUST_BE_GTT_OR_GTC',
  ORDER_ERROR_MUST_BE_LIMIT_ORDER = 'MUST_BE_LIMIT_ORDER',
  ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS = 'NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS',
  ORDER_ERROR_NOT_FOUND = 'NOT_FOUND',
  ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO = 'OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO',
  ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO = 'OFFSET_MUST_BE_GREATER_THAN_ZERO',
  ORDER_ERROR_OUT_OF_SEQUENCE = 'OUT_OF_SEQUENCE',
  ORDER_ERROR_REMOVAL_FAILURE = 'REMOVAL_FAILURE',
  ORDER_ERROR_SELF_TRADING = 'SELF_TRADING',
  ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE = 'SELL_CANNOT_REFERENCE_BEST_BID_PRICE',
  ORDER_ERROR_TIME_FAILURE = 'TIME_FAILURE',
  ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER = 'UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER',
  ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER = 'UNABLE_TO_REPRICE_PEGGED_ORDER',
  ORDER_ERROR_WITHOUT_REFERENCE_PRICE = 'WITHOUT_REFERENCE_PRICE',
}

/**
 * Valid order statuses, these determine several states for an order that cannot be expressed with other fields in Order.
 */
export enum OrderStatusMapping {
  STATUS_ACTIVE = 'Active',
  STATUS_CANCELLED = 'Cancelled',
  STATUS_EXPIRED = 'Expired',
  STATUS_FILLED = 'Filled',
  STATUS_PARKED = 'Parked',
  STATUS_PARTIALLY_FILLED = 'PartiallyFilled',
  STATUS_REJECTED = 'Rejected',
  STATUS_STOPPED = 'Stopped',
}

/**
 * Valid order types, these determine what happens when an order is added to the book
 */
export enum OrderTimeInForceMapping {
  TIME_IN_FORCE_FOK = 'Fill or Kill (FOK)',
  TIME_IN_FORCE_GFA = 'Good for Auction (GFA)',
  TIME_IN_FORCE_GFN = 'Good for Normal (GFN)',
  TIME_IN_FORCE_GTC = `Good 'till Cancel (GTC)`,
  TIME_IN_FORCE_GTT = `Good 'till Time (GTT)`,
  TIME_IN_FORCE_IOC = 'Immediate or Cancel (IOC)',
}

export enum OrderTypeMapping {
  TYPE_LIMIT = 'Limit',
  TYPE_MARKET = 'Market',
  TYPE_NETWORK = 'Network',
}

/**
 * Reason for the proposal being rejected by the core node
 */
export enum ProposalRejectionReasonMapping {
  PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE = 'CLOSE_TIME_TOO_LATE',
  PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON = 'CLOSE_TIME_TOO_SOON',
  PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET = 'COULD_NOT_INSTANTIATE_MARKET',
  PROPOSAL_ERROR_ENACT_TIME_TOO_LATE = 'ENACT_TIME_TOO_LATE',
  PROPOSAL_ERROR_ENACT_TIME_TOO_SOON = 'ENACT_TIME_TOO_SOON',
  PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS = 'INCOMPATIBLE_TIMESTAMPS',
  PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE = 'INSUFFICIENT_EQUITY_LIKE_SHARE',
  PROPOSAL_ERROR_INSUFFICIENT_TOKENS = 'INSUFFICIENT_TOKENS',
  PROPOSAL_ERROR_INVALID_ASSET = 'INVALID_ASSET',
  PROPOSAL_ERROR_INVALID_ASSET_DETAILS = 'INVALID_ASSET_DETAILS',
  PROPOSAL_ERROR_INVALID_FEE_AMOUNT = 'INVALID_FEE_AMOUNT',
  PROPOSAL_ERROR_INVALID_FREEFORM = 'INVALID_FREEFORM',
  PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT = 'INVALID_FUTURE_PRODUCT',
  PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY = 'INVALID_INSTRUMENT_SECURITY',
  PROPOSAL_ERROR_INVALID_MARKET = 'INVALID_MARKET',
  PROPOSAL_ERROR_INVALID_RISK_PARAMETER = 'INVALID_RISK_PARAMETER',
  PROPOSAL_ERROR_INVALID_SHAPE = 'INVALID_SHAPE',
  PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED = 'MAJORITY_THRESHOLD_NOT_REACHED',
  PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT = 'MARKET_MISSING_LIQUIDITY_COMMITMENT',
  PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD = 'MISSING_BUILTIN_ASSET_FIELD',
  PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT = 'MISSING_COMMITMENT_AMOUNT',
  PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS = 'MISSING_ERC20_CONTRACT_ADDRESS',
  PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY = 'NETWORK_PARAMETER_INVALID_KEY',
  PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE = 'NETWORK_PARAMETER_INVALID_VALUE',
  PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED = 'NETWORK_PARAMETER_VALIDATION_FAILED',
  PROPOSAL_ERROR_NODE_VALIDATION_FAILED = 'NODE_VALIDATION_FAILED',
  PROPOSAL_ERROR_NO_PRODUCT = 'NO_PRODUCT',
  PROPOSAL_ERROR_NO_RISK_PARAMETERS = 'NO_RISK_PARAMETERS',
  PROPOSAL_ERROR_NO_TRADING_MODE = 'NO_TRADING_MODE',
  PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE = 'OPENING_AUCTION_DURATION_TOO_LARGE',
  PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL = 'OPENING_AUCTION_DURATION_TOO_SMALL',
  PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED = 'PARTICIPATION_THRESHOLD_NOT_REACHED',
  PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES = 'TOO_MANY_MARKET_DECIMAL_PLACES',
  PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS = 'TOO_MANY_PRICE_MONITORING_TRIGGERS',
  PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE = 'UNKNOWN_RISK_PARAMETER_TYPE',
  PROPOSAL_ERROR_UNKNOWN_TYPE = 'UNKNOWN_TYPE',
  PROPOSAL_ERROR_UNSUPPORTED_PRODUCT = 'UNSUPPORTED_PRODUCT',
  PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE = 'UNSUPPORTED_TRADING_MODE',
}

/**
 * Various states a proposal can transition through:
 * Open ->
 * - Passed -> Enacted.
 * - Rejected.
 * Proposal can enter Failed state from any other state.
 */
export enum ProposalStateMapping {
  STATE_DECLINED = 'Declined',
  STATE_ENACTED = 'Enacted',
  STATE_FAILED = 'Failed',
  STATE_OPEN = 'Open',
  STATE_PASSED = 'Passed',
  STATE_REJECTED = 'Rejected',
  STATE_WAITING_FOR_NODE_VOTE = 'Waiting for Node Vote',
}

/**
 * Whether the placer of an order is aiming to buy or sell on the market
 */
export enum SideMapping {
  SIDE_BUY = 'Long',
  SIDE_SELL = 'Short',
}

/**
 * The status of the stake linking
 */
export enum StakeLinkingStatusMapping {
  STATUS_ACCEPTED = 'Accepted',
  STATUS_PENDING = 'Pending',
  STATUS_REJECTED = 'Rejected',
}

export enum ValidatorStatusMapping {
  VALIDATOR_NODE_STATUS_ERSATZ = 'ERSATZ',
  VALIDATOR_NODE_STATUS_PENDING = 'PENDING',
  VALIDATOR_NODE_STATUS_TENDERMINT = 'TENDERMINT',
}

export enum VoteValueMapping {
  VALUE_NO = 'No',
  VALUE_YES = 'Yes',
}

/**
 * The status of a withdrawal
 */
export enum WithdrawalStatusMapping {
  STATUS_FINALIZED = 'Finalized',
  STATUS_OPEN = 'Open',
  STATUS_REJECTED = 'Rejected',
}
